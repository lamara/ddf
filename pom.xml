<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
--><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>ddf</groupId>
	<artifactId>ddf</artifactId>
	<version>2.2.0.RC3-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>DDF</name>
	<description>Distributed Data Framework (DDF) is an open source, modular integration framework</description>
	<inceptionYear>2010</inceptionYear>

	<organization>
		<name>Codice Foundation</name>
		<url>http://codice.org</url>
	</organization>

	<licenses>
		<license>
			<name>GNU Lesser General Public v3</name>
			<url>http://www.gnu.org/licenses/lgpl.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<issueManagement>
		<system>Jira</system>
		<url>https://tools.codice.org/jira/browse/DDF</url>
	</issueManagement>

	<mailingLists>
		<mailingList>
			<name>Google Groups Mailing List</name>
			<archive>http://groups.google.com/group/ddf-codice</archive>
			<subscribe>http://groups.google.com/group/ddf-codice/subscribe</subscribe>
		</mailingList>
	</mailingLists>

	<developers>
		<developer>
			<name>Ashraf Barakat</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Bruce Beyeler</name>
			<organization>Lockheed Martin</organization>			
		</developer>
		<developer>
			<name>Damon Jones</name>
			<organization>Lockheed Martin</organization>			
		</developer>
		<developer>
			<name>Dan Figliola</name>
			<organization>Lockheed Martin</organization>			
		</developer>
		<developer>
			<name>Dave Willison</name>
			<organization>Aviture</organization>
		</developer>
		<developer>
			<name>Hugh Rodgers</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Ian Barnett</name>
			<organization>Lockheed Martin</organization>		
		</developer>
		<developer>
			<name>Khoa Tran</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Jesse Kim</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Matthew Ramey</name>
			<organization>Lockheed Martin</organization>			
		</developer>
		<developer>
			<name>Michael Menousek</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Phillip Klinefelter</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Rhett Olschner</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Scott Tustison</name>
			<organization>Lockheed Martin</organization>
		</developer>
		<developer>
			<name>Shaun Morris</name>
			<organization>Lockheed Martin</organization>
		</developer>
	</developers>

	<contributors>
		<contributor>
			<name>Sam Snyder</name>
			<organization>Aviture</organization>		
		</contributor>
		<contributor>
			<name>Timothy Anderson</name>
			<organization>Lockheed Martin</organization>		
		</contributor>
		<contributor>
			<name>William Miller</name>
			<organization>Lockheed Martin</organization>		
		</contributor>		
	</contributors>
	
	<modules>
		<module>support</module>
		<module>platform</module>
		<module>action</module>
		<module>mime</module>
		<module>measure</module>
		<module>metrics</module>
        <module>content</module>
		<module>catalog</module>
        <module>security</module>
        <module>ldap</module>
		<module>cloud</module>
		<module>distribution</module>
		<module>sdk</module>
		<module>test</module>
	</modules>

	<properties>
		
	    <!--  default URL properties -->
		<ddf.scm.connection.url />
		<snapshots.repository.url />
		<sitename.default>${project.groupId}</sitename.default>

		<!-- DDF API versions -->
		<ddf.action.api.version>1.0.0</ddf.action.api.version>
		<ddf.catalog.api.version>2.0.11-SNAPSHOT</ddf.catalog.api.version>
		<ddf.content.core.api.version>1.0.0-SNAPSHOT</ddf.content.core.api.version>
		<ddf.mime.api.version>2.0.0.RC1-SNAPSHOT</ddf.mime.api.version>
		<ddf.security.encryption.service.api.version>1.0.0</ddf.security.encryption.service.api.version>
		<ddf.security.pdp.api.version>1.0.0-SNAPSHOT</ddf.security.pdp.api.version>
		<ddf.security.core.api.version>1.0.0-SNAPSHOT</ddf.security.core.api.version>
        <ddf.security.expansion.service.api.version>1.0.0-SNAPSHOT</ddf.security.expansion.service.api.version>

        <!-- Do NOT set karaf.data or karaf.base -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Plugins -->
        <maven.checkstyle.plugin.version>2.9.1</maven.checkstyle.plugin.version>
		<maven.assembly.plugin.version>2.2.2</maven.assembly.plugin.version>
		<maven.clean.plugin.version>2.4.1</maven.clean.plugin.version>
		<maven.resources.plugin.version>2.5</maven.resources.plugin.version>
		<maven.jar.plugin.version>2.4</maven.jar.plugin.version>
		<maven.javadoc.plugin.version>2.7</maven.javadoc.plugin.version>
		<maven.release.plugin.version>2.1</maven.release.plugin.version>
		<maven.site.plugin.version>3.2</maven.site.plugin.version>
		<maven.dependency.plugin.version>2.4</maven.dependency.plugin.version>
		<maven.compiler.plugin.version>2.3.2</maven.compiler.plugin.version>
		<maven.deploy.plugin.version>2.6</maven.deploy.plugin.version>
		<maven.install.plugin.version>2.3.1</maven.install.plugin.version>
		<maven.surefire.plugin.version>2.8.1</maven.surefire.plugin.version>
		<maven.scm.plugin.version>1.7</maven.scm.plugin.version>
		<maven.replacer.plugin.version>1.5.0</maven.replacer.plugin.version>
		<maven.buildnumber.plugin.version>1.1</maven.buildnumber.plugin.version>
		<maven.svn.revision.number.plugin.version>1.6</maven.svn.revision.number.plugin.version>
		<build.helper.plugin.version>1.5</build.helper.plugin.version>
		<felix.plugin.version>2.3.5</felix.plugin.version>
		<jaxb.plugin.version>0.8.0</jaxb.plugin.version>
		<jaxws.plugin.version>1.12</jaxws.plugin.version>
		<cobertura.plugin.version>2.5.1</cobertura.plugin.version>
		<maven.war.plugin.version>2.2</maven.war.plugin.version>

        <!-- Dependency Management Versions -->
		<org.slf4j.version>1.6.1</org.slf4j.version>
		<org.geotools.version>8.4</org.geotools.version>
		<jts.version>1.12</jts.version>
		<saxon.version>9.1.0.8</saxon.version>
		<commons-io.version>2.1</commons-io.version>
		<joda-time.version>1.6.2</joda-time.version>

		<!-- Endorsed Dependencies -->
		<xalan.version>2.7.1</xalan.version>
		<xerces.version>2.9.1</xerces.version>
		<xml-resolver.version>1.2</xml-resolver.version>

        <!-- Bundle Dependency Properties-->
        <!-- Karaf 2.2.7 upgrade <org.apache.servicemix.bundles.asm.version>3.3_2</org.apache.servicemix.bundles.asm.version> -->
		<org.apache.servicemix.bundles.asm.version>3.3.1_1</org.apache.servicemix.bundles.asm.version>
		<org.apache.servicemix.specs.version>2.0.0</org.apache.servicemix.specs.version>
		<org.apache.servicemix.bundles.oro.version>2.0.8_6</org.apache.servicemix.bundles.oro.version>
		<org.springframework.ldap.version>1.3.1.RELEASE</org.springframework.ldap.version>
		<org.apache.servicemix.bundles.dom4j.version>1.6.1_5</org.apache.servicemix.bundles.dom4j.version>
		<org.apache.servicemix.bundles.jaxen.version>1.1.3_1</org.apache.servicemix.bundles.jaxen.version>
		<org.apache.servicemix.bundles.bcprov-jdk15.version>1.46_3</org.apache.servicemix.bundles.bcprov-jdk15.version>
		<org.opensaml.xmltooling.version>1.3.2-1</org.opensaml.xmltooling.version>
		<org.ops4j.pax.url.classpath.version>1.3.5</org.ops4j.pax.url.classpath.version>
		<org.apache.felix.compendium.version>1.4.0</org.apache.felix.compendium.version>
		<org.ops4j.pax.swissbox.version>1.3.1</org.ops4j.pax.swissbox.version>
		<org.ops4j-base-lang>1.2.2</org.ops4j-base-lang>
		<geronimo-j2ee-connector_1.5_spec.version>2.0.0</geronimo-j2ee-connector_1.5_spec.version>
		<saxon.bundle.plugin>${saxon.version}_1</saxon.bundle.plugin>
		<servicemix.specs.version>${org.apache.servicemix.specs.version}</servicemix.specs.version>

		<!-- ddf thirdparty bundle versions.  these should only be used in the feature xml files.
			any bundle dependent on classes from these jars should depend on the jar itself and not the bundalized version.  -->
		<org.geotools.bundle.version>${org.geotools.version}_2</org.geotools.bundle.version>
		<opengis.bundle.version>${org.geotools.version}_2</opengis.bundle.version>
		<jts.bundle.version>${jts.version}_1</jts.bundle.version>

        <!-- Features Versions -->
		<cxf.version>2.7.5</cxf.version>
        <!-- when upgrading the karaf version, ensure that the properties and cfg files in package-commons/.../distribution/etc/ are updated and compatible with the
        latest karaf version.  Those configuration files in package-commons/.../distribution/etc have been copied from a previous version of Karaf, and are
        source controlled because of some slight customizations that have been made to them.  -->
		<karaf.version>2.3.1</karaf.version>
		<camel.version>2.11.0</camel.version>
        <!--
        Default properties for Version.txt (this is the file containing the build number and
        svn revision number for the ddf-common project).
        These properties are overwritten during the actual release process (by specifying
        the ddf-prepare-release profile).
        -->
		<maven.build.timestamp.format>yyyyMMdd-HHmm</maven.build.timestamp.format>
		<buildNumber>${maven.build.timestamp}</buildNumber>
		<prefix.revision>DEV</prefix.revision>

	</properties>

	<!--
	NOTE: The properties ddf.scm.connection.url, snapshots.repository.url and releases.repository.url should be defined
	in your .m2/settings.xml file.
	-->
	<scm>
		<url>https://github.com/codice/ddf.git</url>
		<connection>scm:git:git://github.com/codice/ddf.git</connection>
		<developerConnection>scm:git:git://github.com/codice/ddf.git</developerConnection>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>snapshots</id>
			<url>${snapshots.repository.url}</url>
		</snapshotRepository>
		<repository>
			<id>releases</id>
			<url>${releases.repository.url}</url>
		</repository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <version>${felix.plugin.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <instructions>
                            <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
<!--                             <Export-Package /> -->
                        </instructions>
                    </configuration>
                </plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven.compiler.plugin.version}</version>
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
						<maxmem>512M</maxmem>
						<fork>${compiler.fork}</fork>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${maven.checkstyle.plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>ddf.support</groupId>
							<artifactId>support-checkstyle</artifactId>
							<version>${project.version}</version>
							<optional>true</optional>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>checkstyle-check</id>
							<phase>verify</phase>
							<goals>
								<goal>check</goal>
							</goals>
							<configuration>
								<!-- This configures the plugin for mvn install -->
								<configLocation>checkstyle-enforced.xml</configLocation>
								<headerLocation>lpgl-header-check.txt</headerLocation>
								<sourceDirectory>${basedir}</sourceDirectory>
								<includes>src/**/*.java, src/**/*.xml, pom.xml</includes>
								<consoleOutput>true</consoleOutput>
								<failsOnError>true</failsOnError>
								<linkXRef>false</linkXRef>
							</configuration>
						</execution>
					</executions>
					<configuration>
						<!-- This configures the plugin for mvn checkstyle:checkstyle -->
						<configLocation>checkstyle-enforced.xml</configLocation>
						<headerLocation>lpgl-header-check.txt</headerLocation>
						<sourceDirectory>${basedir}</sourceDirectory>
						<includes>src/**/*.java, src/**/*.xml, pom.xml</includes>
						<consoleOutput>true</consoleOutput>
						<failsOnError>false</failsOnError>
						<linkXRef>false</linkXRef>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven.deploy.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven.release.plugin.version}</version>
					<configuration>
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<preparationGoals>clean verify install</preparationGoals>
						<pushChanges>false</pushChanges>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven.clean.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven.assembly.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven.site.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>${maven.dependency.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven.resources.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven.jar.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven.install.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven.surefire.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>${cobertura.plugin.version}</version>
				</plugin>
				
				<plugin>
					<groupId>org.apache.karaf.tooling</groupId>
					<artifactId>features-maven-plugin</artifactId>
					<version>${karaf.version}</version>
				</plugin>
				
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build.helper.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.jvnet.jaxb2.maven2</groupId>
					<artifactId>maven-jaxb2-plugin</artifactId>
					<version>${jaxb.plugin.version}</version>
				</plugin>
				
				<plugin>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven.javadoc.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.cxf</groupId>
					<artifactId>cxf-codegen-plugin</artifactId>
					<version>${cxf.version}</version>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<!--  We dont' wnat inherit this *change* to the plugin configuration. -->
				<!--  Sub modules will still inherit the plugin and the configuration from pluginManagment -->

				<inherited>false</inherited>
				<executions>
					<execution>
						<!-- Match the execution defined in the pluginManagment and override it-->
						<!-- Prevents the check here. -->
						<id>checkstyle-check</id>
						<phase>none</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${maven.checkstyle.plugin.version}</version>
				<configuration>
					<!-- This configures the plugin for mvn site -->
					<configLocation>config/sun_checks.xml</configLocation>
					<consoleOutput>false</consoleOutput>
					<failsOnError>false</failsOnError>
					<linkXRef>true</linkXRef>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<dependencyDetailsEnabled>false</dependencyDetailsEnabled>
					<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
<!-- Uncomment this profile when a test module is added.  This way this profile can be used to facilitate the release. -->
<!--         <profile> -->
<!--             Enable this profile to run the integration tests, for example:-->
<!--             mvn clean install -P ddf-integration-test -->
<!--             OR -->
<!--             set and activate this profile in your ~/.m2/settings.xml -->
<!--             -->
<!--             <id>ddf-integration-test</id> -->
<!--             <activation> -->
<!--                 <property> -->
<!--                     <name>ddf-integration-test</name> -->
<!--                 </property> -->
<!--             </activation> -->
<!--             Add the test module. Only build if this profile is enabled. -->
<!--             <modules> -->
<!--                 <module>test</module> -->
<!--             </modules> -->
<!--         </profile> -->


		<profile>
			<id>bundleSource</id>
			<build>
				<plugins>
					<plugin>
                        <!-- NOTE: We don't need a groupId specification because the group is
                            org.apache.maven.plugins ...which is assumed by default.
                        -->
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven.assembly.plugin.version}</version>
						<configuration>
							<descriptorRefs>
								<descriptorRef>project</descriptorRef>
							</descriptorRefs>
							<formats>
								<format>zip</format>
							</formats>
							<runOnlyAtExecutionRoot>true</runOnlyAtExecutionRoot>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
                                <!-- this is used for inheritance merges -->
								<phase>package</phase>
                                <!-- append to the packaging phase. -->
								<goals>
									<goal>single</goal>
                                    <!-- goals == mojos -->
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
<!-- ****************  Profiles for End-of-Sprint Release  ************************  -->


	    <!--
	    Run this profile to tag the release in Subversion.
	    -->
		<profile>
			<id>ddf-perform-end-of-sprint-release</id>
			<activation>
				<property>
					<name>ddf-perform-end-of-sprint-release</name>
				</property>
			</activation>

			<properties>
				<releaseVersion>${releaseVersion}</releaseVersion>
				<tag>${tag}</tag>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<version>${maven.scm.plugin.version}</version>
						<configuration>
							<connectionType>connection</connectionType>
							<username>${username}</username>
							<password>${password}</password>
						</configuration>
						<executions>
				          <!--
				          Tags the release version in Subversion
				          -->
							<execution>
								<id>tag</id>
								<inherited>false</inherited>
								<configuration>
									<basedir>${basedir}</basedir>
									<tag>${tag}</tag>
									<message>Tagging release ${releaseVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
	    <!--
        Prepares the pom files for next sprint's development by:
        * changing all <version> values with the ${releaseVersion} to the ${developmentVersion} specified on the command line
         The developmentVersion specified on the command line should have "-SNAPSHOT" in it and should increment the release version,
         e.g., 2.1.0.ALPHA4 -> 2.1.0.ALPHA5-SNAPSHOT

        NOTE: Needed 2 profiles (prepare and perform) because when maven-replacer-plugin replaces ${project.version} with
        ${releaseVersion} value, Maven does not actually update the ${project.version} value even though the <version> tag's
        value in the pom files were updated. This is probably because Maven validates all of the pom files initially and
        sets the ${project.version} property at that time and does not update it for the entire maven execution. By running
        2 commands across 2 different profiles, the "prepare" profile gets the <version> updated so when the second "perform" profile
        runs, maven sets ${project.version} to the updated value.
        -->
		<profile>
			<id>ddf-prepare-next-sprint-dev</id>
			<activation>
				<property>
					<name>ddf-prepare-next-sprint-dev</name>
				</property>
			</activation>

			<properties>
			    <!-- 
				Have to specify releaseVersion here because code not committed in previous profile ddf-perform-end-of-sprint-release,
				hence the releaseVersion is only in the tag, not in the trunk.
				-->
			    <releaseVersion>${releaseVersion}</releaseVersion>
				<developmentVersion>${developmentVersion}</developmentVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   Change version in pom files from current value, e.g., 2.2.0.ALPHA2-SNAPSHOT,
		          		   to next dev version specified in property, e.g., 2.2.0.ALPHA2-SNAPSHOT.
		          		   -->
							<execution>
								<id>increment_version</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
										<include>**/pom.xml</include>
									</includes>
									<!-- 
									Exclude the app poms because the apps maintain their own
									versions independent of the overall project.version
									
									This <exclude> stanza allows support for the case where the
									app version may be the same as the project.version but do not
									want to change it to the releaseVersion.
									-->
									<excludes>
									    <exclude>**/*app/pom.xml</exclude>
									</excludes>
									<replacements>
										<replacement>
											<token>&lt;version&gt;${releaseVersion}&lt;/version&gt;</token>
											<value>&lt;version&gt;${developmentVersion}&lt;/version&gt;</value>
										</replacement>
									</replacements>
									<regex>false</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	    <!--
	    After running the ddf-prepare-next-sprint-dev profile to change the <version> values
	    in all pom files to the new development version, run this profile to commit
	    the updated pom files into Subversion.
	    -->
		<profile>
			<id>ddf-perform-next-sprint-dev</id>
			<activation>
				<property>
					<name>ddf-perform-next-sprint-dev</name>
				</property>
			</activation>

			<properties>
				<developmentVersion>${developmentVersion}</developmentVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<version>${maven.scm.plugin.version}</version>
						<configuration>
							<connectionType>connection</connectionType>
							<username>${username}</username>
							<password>${password}</password>
						</configuration>
						<executions>
		                  <!--
				          Commit the new development version into Subversion
				          -->
							<execution>
								<id>commit_dev</id>
								<configuration>
									<basedir>${basedir}</basedir>
									<message>Commit of new development version ${developmentVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>checkin</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>


<!-- ****************  OLD - Profiles for End-of-Sprint Release  ************************  -->

        <!--
        Prepares the pom files for an End-of-Sprint release by:
        * changing all <version> values with the current ${project.version} to the ${releaseVersion} specified on the command line
		  in the trunk and module poms, but *not* the app poms (they remain at whatever version they are currently at, including
		  a "-SNAPSHOT" version if applicable)
        * Build Number and SCM Version Number are *not* updated, hence the Version.txt file is not updated for an End-of-Sprint release.
		  
        NOTE: Needed 2 profiles (prepare and perform) because when maven-replacer-plugin replaces ${project.version} with
        ${releaseVersion} value, Maven does not actually update the ${project.version} value even though the <version> tag's
        value in the pom files were updated. This is probably because Maven validates all of the pom files initially and
        sets the ${project.version} property at that time and does not update it for the entire maven execution. By running
        2 commands across 2 different profiles, the "prepare" profile gets the <version> updated so when the second "perform" profile
        runs, maven sets ${project.version} to the updated value.
        -->
		<profile>
			<id>ddf-prepare-end-of-sprint-release-OLD</id>
			<activation>
				<property>
					<name>ddf-prepare-end-of-sprint-release-OLD</name>
				</property>
			</activation>

			<properties>
				<releaseVersion>${releaseVersion}</releaseVersion>
			</properties>

			<build>
				<plugins>

					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   Change version in pom files from current value, e.g., 2.1.0.ALPHA2-SNAPSHOT,
		          		   to release version specified in property, e.g., 2.1.0.ALPHA2.

		          		   NOTE: Had to use &lt;version&gt;x.y.z&lt;/version&gt; as search string because replacement
		          		   was concatenating -SNAPSHOT multiple times when search string was just x.y.z
		          		   -->
							<execution>
								<id>remove_snapshot_on_versions</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
									    <include>**/pom.xml</include>
									</includes>
									<!-- 
									Exclude the app poms because the apps maintain their own
									versions independent of the overall project.version
									
									This <exclude> stanza allows support for the case where the
									app version may be the same as the project.version but do not
									want to change it to the releaseVersion.
									-->
									<excludes>
									    <exclude>**/*app/pom.xml</exclude>
									</excludes>
									<replacements>
										<replacement>
											<token>&lt;version&gt;${project.version}&lt;/version&gt;</token>
											<value>&lt;version&gt;${releaseVersion}&lt;/version&gt;</value>
										</replacement>
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	    <!--
	    After running the ddf-prepare-release profile to change the <version> values
	    in all pom files to the release version, run this profile to commit and tag
	    the updated pom files into Subversion.
	    -->
		<profile>
			<id>ddf-perform-end-of-sprint-release-OLD</id>
			<activation>
				<property>
					<name>ddf-perform-end-of-sprint-release-OLD</name>
				</property>
			</activation>

			<properties>
				<releaseVersion>${releaseVersion}</releaseVersion>
				<tag>${tag}</tag>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<version>${maven.scm.plugin.version}</version>
						<configuration>
							<connectionType>connection</connectionType>
							<username>${username}</username>
							<password>${password}</password>
						</configuration>
						<executions>
		                  <!--
				          Commit the release into Subversion
				          -->
							<execution>
								<id>commit_release</id>
								<configuration>
									<basedir>${basedir}</basedir>
									<message>Commit of release version ${releaseVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>checkin</goal>
								</goals>
							</execution>
				          <!--
				          Tags the release version in Subversion
				          -->
							<execution>
								<id>tag</id>
								<inherited>false</inherited>
								<configuration>
									<basedir>${basedir}</basedir>
									<tag>${tag}</tag>
									<message>Tagging release ${releaseVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
		
	    <!--
        Prepares the pom files for next sprint's development by:
        * changing all <version> values with the ${releaseVersion} to the ${developmentVersion} specified on the command line
         The developmentVersion specified on the command line should have "-SNAPSHOT" in it and should increment the release version,
         e.g., 2.1.0.ALPHA4 -> 2.1.0.ALPHA5-SNAPSHOT

        NOTE: Needed 2 profiles (prepare and perform) because when maven-replacer-plugin replaces ${project.version} with
        ${releaseVersion} value, Maven does not actually update the ${project.version} value even though the <version> tag's
        value in the pom files were updated. This is probably because Maven validates all of the pom files initially and
        sets the ${project.version} property at that time and does not update it for the entire maven execution. By running
        2 commands across 2 different profiles, the "prepare" profile gets the <version> updated so when the second "perform" profile
        runs, maven sets ${project.version} to the updated value.
        -->
		<profile>
			<id>ddf-prepare-next-sprint-dev-OLD</id>
			<activation>
				<property>
					<name>ddf-prepare-next-sprint-dev-OLD</name>
				</property>
			</activation>

			<properties>
			    <!-- 
				Have to specify releaseVersion here because code not committed in previous profile ddf-perform-end-of-sprint-release,
				hence the releaseVersion is only in the tag, not in the trunk.
				-->
			    <releaseVersion>${releaseVersion}</releaseVersion>
				<developmentVersion>${developmentVersion}</developmentVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   Change version in pom files from current value, e.g., 2.1.0.ALPHA3,
		          		   to next dev version specified in property, e.g., 2.1.0.ALPHA4-SNAPSHOT.
		          		   -->
							<execution>
								<id>append_snapshot_on_versions</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
										<include>**/pom.xml</include>
									</includes>
									<!-- 
									Exclude the app poms because the apps maintain their own
									versions independent of the overall project.version
									
									This <exclude> stanza allows support for the case where the
									app version may be the same as the project.version but do not
									want to change it to the releaseVersion.
									-->
									<excludes>
									    <exclude>**/*app/pom.xml</exclude>
									</excludes>
									<replacements>
										<replacement>
											<token>&lt;version&gt;${releaseVersion}&lt;/version&gt;</token>
											<value>&lt;version&gt;${developmentVersion}&lt;/version&gt;</value>
										</replacement>
									</replacements>
									<regex>false</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	    <!--
	    After running the ddf-prepare-next-sprint-dev profile to change the <version> values
	    in all pom files to the new development version, run this profile to commit
	    the updated pom files into Subversion.
	    -->
		<profile>
			<id>ddf-perform-next-sprint-dev-OLD</id>
			<activation>
				<property>
					<name>ddf-perform-next-sprint-dev-OLD</name>
				</property>
			</activation>

			<properties>
				<developmentVersion>${developmentVersion}</developmentVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<version>${maven.scm.plugin.version}</version>
						<configuration>
							<connectionType>connection</connectionType>
							<username>${username}</username>
							<password>${password}</password>
						</configuration>
						<executions>
		                  <!--
				          Commit the new development version into Subversion
				          -->
							<execution>
								<id>commit_dev</id>
								<configuration>
									<basedir>${basedir}</basedir>
									<message>Commit of new development version ${developmentVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>checkin</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
<!-- ****************  Profiles for Formal Release  ************************  -->

        <!--
        Prepares the pom files for a release by:
        * changing all <version> values with the current ${project.version} to the ${releaseVersion} specified on the command line
        * removing "-SNAPSHOT" from all <version> values in pom files that are not ${project.version}
        * removing "-SNAPSHOT" from all <ddf.*.version> properties in this pom file

        NOTE: Needed 2 profiles (prepare and perform) because when maven-replacer-plugin replaces ${project.version} with
        ${releaseVersion} value, Maven does not actually update the ${project.version} value even though the <version> tag's
        value in the pom files were updated. This is probably because Maven validates all of the pom files initially and
        sets the ${project.version} property at that time and does not update it for the entire maven execution. By running
        2 commands across 2 different profiles, the "prepare" profile gets the <version> updated so when the second "perform" profile
        runs, maven sets ${project.version} to the updated value.
        -->
		<profile>
			<id>ddf-prepare-release</id>
			<activation>
				<property>
					<name>ddf-prepare-release</name>
				</property>
			</activation>

			<properties>
				<releaseVersion>${releaseVersion}</releaseVersion>
			</properties>

			<build>
				<plugins>

		        <!--
				Build Number Plugin used to populate timestamp portion of build number in Version.txt file.
				This plugin will create the ${buildNumber} property and substitute its value in the Version.txt resource file.
				(Only populated when doing an actual release because this plugin relies on an SCM URL which should not
				be required for buliding DDF, especially in offline mode where no settings.xml file may specify an SCM URL).
				-->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<version>${maven.buildnumber.plugin.version}</version>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>create</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<doCheck>true</doCheck>
							<doUpdate>true</doUpdate>
							<format>{0,date,yyyyMMdd}</format>
							<items>
								<item>timestamp</item>
							</items>
						</configuration>
					</plugin>

		        <!--
				SVN Revision Number Plugin used to populate revision number portion of build number in Version.txt file.
				This plugin will create the ${prefix.revision} property and substitute its value in the Version.txt resource file.
				(Only populated when doing an actual release because this plugin relies on an SCM URL which should not
				be required for buliding DDF, especially in offline mode where no settings.xml file may specify an SCM URL).
				-->
					<plugin>
						<groupId>com.google.code.maven-svn-revision-number-plugin</groupId>
						<artifactId>maven-svn-revision-number-plugin</artifactId>
						<version>${maven.svn.revision.number.plugin.version}</version>
						<executions>
							<execution>
								<phase>initialize</phase>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<entries>
								<entry>
									<path>${project.basedir}</path>
									<prefix>prefix</prefix>
								</entry>
							</entries>
						</configuration>
					</plugin>

					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   Change version in pom files from current value, e.g., 2.1.0.ALPHA2-SNAPSHOT,
		          		   to release version specified in property, e.g., 2.1.0.ALPHA2.

		          		   NOTE: Had to use &lt;version&gt;x.y.z&lt;/version&gt; as search string because replacement
		          		   was concatenating -SNAPSHOT multiple times when search string was just x.y.z
		          		   -->
							<execution>
								<id>remove_snapshot_on_versions</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
									    <include>**/pom.xml</include>
									</includes>
									<!-- 
									Exclude the app poms because the apps maintain their own
									versions independent of the overall project.version
									
									This <exclude> stanza allows support for the case where the
									app version may be the same as the project.version but do not
									want to change it to the releaseVersion.
									-->
									<excludes>
									    <exclude>**/*app/pom.xml</exclude>
									</excludes>
									<replacements>
										<replacement>
											<token>&lt;version&gt;${project.version}&lt;/version&gt;</token>
											<value>&lt;version&gt;${releaseVersion}&lt;/version&gt;</value>
										</replacement>
										
										<!-- Removes -SNAPSHOT from all <version> values -->
										<replacement>
											<token>&lt;version&gt;(.*?)-SNAPSHOT&lt;/version&gt;</token>
											<value>&lt;version&gt;$1&lt;/version&gt;</value>
										</replacement>
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
							
							<execution>
								<id>update_versions_in_app_poms</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
									    <include>**/*app/pom.xml</include>
									</includes>
									<replacements>
										<replacement>
										   <xpath>//parent[version='${project.version}']</xpath>
										   <token>${project.version}</token>
					                       <value>${releaseVersion}</value>
					                   </replacement>
										
										<!-- Removes -SNAPSHOT from all <version> values -->
										<replacement>
											<token>&lt;version&gt;(.*?)-SNAPSHOT&lt;/version&gt;</token>
											<value>&lt;version&gt;$1&lt;/version&gt;</value>
										</replacement>
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>

			               <!--
		                   Removes -SNAPSHOT from all <properties> in master pom whose
		                   property name starts with "ddf." and ends with ".version",
		                   e.g., ddf.catalog.api.version
		                   -->
							<execution>
								<id>remove_snapshot_on_properties</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
										<include>pom.xml</include>
									</includes>
									<replacements>
										<replacement>
											<xpath>//properties/*[substring(name(),1, 4) = 'ddf.' and substring(name(),string-length(name())-7) = '.version']</xpath>
											<token>(.*?)-SNAPSHOT</token>
											<value>$1</value>
										</replacement>
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	    <!--
	    After running the ddf-prepare-release profile to change the <version> values
	    in all pom files to the release version, run this profile to commit and tag
	    the updated pom files into Subversion.
	    -->
		<profile>
			<id>ddf-perform-release</id>
			<activation>
				<property>
					<name>ddf-perform-release</name>
				</property>
			</activation>

			<properties>
				<releaseVersion>${releaseVersion}</releaseVersion>
				<tag>${tag}</tag>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<version>${maven.scm.plugin.version}</version>
						<configuration>
							<connectionType>connection</connectionType>
							<username>${username}</username>
							<password>${password}</password>
						</configuration>
						<executions>
		                  <!--
				          Commit the release into Subversion
				          -->
							<execution>
								<id>commit_release</id>
				            <!-- <inherited>false</inherited> -->
								<configuration>
									<basedir>${basedir}</basedir>
									<message>Commit of release version ${releaseVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>checkin</goal>
								</goals>
							</execution>

				          <!--
				          Tags the release version in Subversion
				          -->
							<execution>
								<id>tag</id>
								<inherited>false</inherited>
								<configuration>
									<basedir>${basedir}</basedir>
									<tag>${tag}</tag>
									<message>Tagging release ${releaseVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>tag</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	    <!--
        Prepares the pom files for next sprint's development by:
        * changing all <version> values with the current ${project.version} to the ${developmentVersion} specified on the command line
         The developmentVersion specified on the command line should have "-SNAPSHOT" in it and should increment the release version,
         e.g., 2.1.0.ALPHA4 -> 2.1.0.ALPHA5-SNAPSHOT

        NOTE: Needed 2 profiles (prepare and perform) because when maven-replacer-plugin replaces ${project.version} with
        ${releaseVersion} value, Maven does not actually update the ${project.version} value even though the <version> tag's
        value in the pom files were updated. This is probably because Maven validates all of the pom files initially and
        sets the ${project.version} property at that time and does not update it for the entire maven execution. By running
        2 commands across 2 different profiles, the "prepare" profile gets the <version> updated so when the second "perform" profile
        runs, maven sets ${project.version} to the updated value.
        -->
		<profile>
			<id>ddf-prepare-new-dev</id>
			<activation>
				<property>
					<name>ddf-prepare-new-dev</name>
				</property>
			</activation>

			<properties>
				<developmentVersion>${developmentVersion}</developmentVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   Change version in pom files from current value, e.g., 2.1.0.ALPHA3,
		          		   to next dev version specified in property, e.g., 2.1.0.ALPHA4-SNAPSHOT.
		          		   -->
							<execution>
								<id>append_snapshot_on_versions</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
										<include>**/pom.xml</include>
									</includes>
									<!-- 
									Exclude the app poms because the apps maintain their own
									versions independent of the overall project.version
									
									This <exclude> stanza allows support for the case where the
									app version may be the same as the project.version but do not
									want to change it to the releaseVersion.
									-->
									<excludes>
									    <exclude>**/*app/pom.xml</exclude>
									</excludes>
									<replacements>
										<replacement>
											<token>&lt;version&gt;${project.version}&lt;/version&gt;</token>
											<value>&lt;version&gt;${developmentVersion}&lt;/version&gt;</value>
										</replacement>
									</replacements>
									<regex>false</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
							
							<!--
							Update applications' pom files so that the version of their parent pom is
							set to the new development version,
							i.e., replace //parent/version value with new developmentVersion 
							-->
							<execution>
								<id>update_parent_versions_in_app_poms</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
										<include>**/*app/pom.xml</include>
									</includes>									
									<replacements>
										<replacement>
										   <xpath>//parent[version='${project.version}']</xpath>
										   <token>${project.version}</token>
					                       <value>${developmentVersion}</value>
					                   </replacement>
									</replacements>
									<regex>false</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	    <!--
	    After running the ddf-prepare-new-dev profile to change the <version> values
	    in all pom files to the new development version, run this profile to commit
	    the updated pom files into Subversion.
	    -->
		<profile>
			<id>ddf-perform-new-dev</id>
			<activation>
				<property>
					<name>ddf-perform-new-dev</name>
				</property>
			</activation>

			<properties>
				<developmentVersion>${developmentVersion}</developmentVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<version>${maven.scm.plugin.version}</version>
						<configuration>
							<connectionType>connection</connectionType>
							<username>${username}</username>
							<password>${password}</password>
						</configuration>
						<executions>
		                  <!--
				          Commit the new development version into Subversion
				          -->
							<execution>
								<id>commit_dev</id>
				            <!-- <inherited>false</inherited> -->
								<configuration>
									<basedir>${basedir}</basedir>
									<message>Commit of new development version ${developmentVersion}</message>
								</configuration>
								<phase>prepare-package</phase>
								<goals>
									<goal>checkin</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!--
		Profiles to update trunk after branching and releasing.
		Example:
		   Branch from trunk 2.1.0.ALPHA12-SNAPSHOT and release as 2.1.0.20130129-1341.
		   Now need to update trunk from 2.1.0.ALPHA12-SNAPSHOT to 2.2.0.ALPHA1-SNAPSHOT 
		   and string -SNAPSHOT from all application-related poms.
		-->
		<profile>
			<id>ddf-update-for-dev-after-release-part1</id>
			<activation>
				<property>
					<name>ddf-update-for-dev-after-release-part1</name>
				</property>
			</activation>

			<properties>
				<releaseVersion>${releaseVersion}</releaseVersion>
			</properties>

			<build>
				<plugins>
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   Change version in pom files from current value, e.g., 2.1.0.ALPHA2-SNAPSHOT,
		          		   to release version specified in property, e.g., 2.1.0.ALPHA2.

		          		   NOTE: Had to use &lt;version&gt;x.y.z&lt;/version&gt; as search string because replacement
		          		   was concatenating -SNAPSHOT multiple times when search string was just x.y.z
		          		   -->
							<execution>
								<id>remove_snapshot_on_versions</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
									    <include>**/pom.xml</include>
									</includes>
									<replacements>
										<replacement>
											<token>&lt;version&gt;${project.version}&lt;/version&gt;</token>
											<value>&lt;version&gt;${releaseVersion}&lt;/version&gt;</value>
										</replacement>
										
										<!-- 
										Removes -SNAPSHOT from all <version> values.
										
										Ideally where version != releaseVersion so that only app versions are stripped of -SNAPSHOT 
										but unable to do that in this profile, hence the need for "part2" profile.
										-->
										<replacement>
											<token>&lt;version&gt;(.*?)-SNAPSHOT&lt;/version&gt;</token>
											<value>&lt;version&gt;$1&lt;/version&gt;</value>
										</replacement>
																				
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>

			               <!--
		                   Removes -SNAPSHOT from all <properties> in master pom whose
		                   property name starts with "ddf." and ends with ".version",
		                   e.g., ddf.catalog.api.version
		                   -->
							<execution>
								<id>remove_snapshot_on_properties</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
										<include>pom.xml</include>
									</includes>
									<replacements>
										<replacement>
											<xpath>//properties/*[substring(name(),1, 4) = 'ddf.' and substring(name(),string-length(name())-7) = '.version']</xpath>
											<token>(.*?)-SNAPSHOT</token>
											<value>$1</value>
										</replacement>
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
		<!--
	    Add -SNAPSHOT back to all poms that currently have desired releaseVersion (which will now be project.version)
	    but without the -SNAPSHOT.
	    This would be the trunk pom and all poms that use it as their parent, but none of the app poms or their
	    parent poms. This profile was needed to correct the stripping of the -SNAPSHOT in *all* poms that was done 
	    in the "part1" profile.

	    NOTE: Had to use &lt;version&gt;x.y.z&lt;/version&gt; as search string because replacement
	    was concatenating -SNAPSHOT multiple times when search string was just x.y.z
	    -->
		<profile>
			<id>ddf-update-for-dev-after-release-part2</id>
			<activation>
				<property>
					<name>ddf-update-for-dev-after-release-part2</name>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${maven.replacer.plugin.version}</version>
						<executions>
			               <!--
		          		   NOTE: Had to use &lt;version&gt;x.y.z&lt;/version&gt; as search string because replacement
		          		   was concatenating -SNAPSHOT multiple times when search string was just x.y.z
		          		   -->
							<execution>
								<id>remove_snapshot_on_versions</id>
								<inherited>false</inherited>
								<configuration>
									<includes>
									    <include>**/pom.xml</include>
									</includes>
									
									<replacements>
										<replacement>
											<token>&lt;version&gt;${project.version}&lt;/version&gt;</token>
											<value>&lt;version&gt;${project.version}-SNAPSHOT&lt;/version&gt;</value>
										</replacement>										
									</replacements>
									<regex>true</regex>
								</configuration>
								<phase>initialize</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>		

	</profiles>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<artifactId>karaf</artifactId>
				<groupId>org.apache.karaf</groupId>
				<version>${karaf.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.apache.karaf</groupId>
				<artifactId>apache-karaf</artifactId>
				<version>${karaf.version}</version>
				<type>tar.gz</type>
			</dependency>

			<dependency>
				<groupId>org.apache.karaf</groupId>
				<artifactId>apache-karaf</artifactId>
				<version>${karaf.version}</version>
				<type>zip</type>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-parent</artifactId>
				<version>${camel.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-parent</artifactId>
				<version>${cxf.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
      
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-api</artifactId>
                <version>${cxf.version}</version>
            </dependency>
			
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-bundle</artifactId>
				<version>${cxf.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-bundle-jaxrs</artifactId>
				<version>${cxf.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-security</artifactId>
				<version>${cxf.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-ws-security</artifactId>
				<version>${cxf.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cxf.services.sts</groupId>
				<artifactId>cxf-services-sts-core</artifactId>
				<version>${cxf.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-core</artifactId>
				<version>${cxf.version}</version>
			</dependency>
	   
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-transports-http</artifactId>
				<version>${cxf.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-frontend-jaxrs</artifactId>
				<version>${cxf.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.osgi</groupId>
				<artifactId>spring-osgi-mock</artifactId>
				<version>1.2.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>ddf.action.core</groupId>
				<artifactId>action-core-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.catalog.core</groupId>
				<artifactId>catalog-core-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.content.core</groupId>
				<artifactId>content-core-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.mime.core</groupId>
				<artifactId>mime-core-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.measure</groupId>
				<artifactId>measure-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.security.core</groupId>
				<artifactId>security-core-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.security.encryption</groupId>
				<artifactId>security-encryption-api</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.content.core</groupId>
				<artifactId>content-core-impl</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.mime.core</groupId>
				<artifactId>mime-core-impl</artifactId>
				<version>${project.version}</version>
			</dependency>
			
			<dependency>
				<groupId>ddf.security.core</groupId>
				<artifactId>security-core-impl</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.security.cas</groupId>
				<artifactId>security-cas-impl</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.action.core</groupId>
				<artifactId>action-core-impl</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.catalog.core</groupId>
				<artifactId>catalog-core-commons</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.catalog.core</groupId>
				<artifactId>filter-proxy</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.catalog.common</groupId>
				<artifactId>geo-formatter</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ddf.catalog.core</groupId>
				<artifactId>catalog-core-camelcomponent</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>action-core-app</artifactId>
				<groupId>ddf.action.core</groupId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>mime-core-app</artifactId>
				<groupId>ddf.mime.core</groupId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>content-core-app</artifactId>
				<groupId>ddf.content.core</groupId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>com.vividsolutions</groupId>
				<artifactId>jts</artifactId>
				<version>1.12</version>
			</dependency>

			<dependency>
				<groupId>org.geotools</groupId>
				<artifactId>gt-jts-wrapper</artifactId>
				<version>${org.geotools.version}</version>
			</dependency>

			<dependency>
				<groupId>org.geotools</groupId>
				<artifactId>gt-opengis</artifactId>
				<version>${org.geotools.version}</version>
			</dependency>

			<dependency>
				<groupId>org.geotools</groupId>
				<artifactId>gt-main</artifactId>
				<version>${org.geotools.version}</version>
			</dependency>

			<dependency>
				<groupId>org.geotools.xsd</groupId>
				<artifactId>gt-xsd-gml3</artifactId>
				<version>${org.geotools.version}</version>
			</dependency>

			<dependency>
				<groupId>xalan</groupId>
				<artifactId>xalan</artifactId>
				<version>${xalan.version}</version>
			</dependency>

			<dependency>
				<groupId>xalan</groupId>
				<artifactId>serializer</artifactId>
				<version>${xalan.version}</version>
			</dependency>

			<dependency>
				<groupId>xerces</groupId>
				<artifactId>xercesImpl</artifactId>
				<version>${xerces.version}</version>
			</dependency>

			<dependency>
				<groupId>net.sf.saxon</groupId>
				<artifactId>saxon</artifactId>
				<version>${saxon.version}</version>
			</dependency>

			<dependency>
				<groupId>net.sf.saxon</groupId>
				<artifactId>saxon-dom</artifactId>
				<version>${saxon.version}</version>
			</dependency>

			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.5</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-ext</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-jdk14</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.servicemix.specs</groupId>
				<artifactId>org.apache.servicemix.specs.jsr311-api-1.1</artifactId>
				<version>2.0.0</version>
			</dependency>

			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>

			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

    <!--
    Dependencies listed here will always be used in all sub poms. 
    You should not redeclare them in the sub pom's dependencies section.
    -->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<repositories>
	    <repository>
	      <id>central</id>
	      <name>Central Repository</name>
	      <url>http://repo.maven.apache.org/maven2</url>
	      <layout>default</layout>
	      <snapshots>
	        <enabled>false</enabled>
	      </snapshots>
	    </repository>   
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net repository</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
		<repository>
			<id>osgeo</id>
			<name>Open Source Geospatial Foundation Repository</name>
			<url>http://download.osgeo.org/webdav/geotools/</url>
		</repository>
		<repository>
			<id>spring-source-external</id>
			<name>SpringSource EBR External</name>
			<url>http://repository.springsource.com</url>
		</repository>
		<repository>
			<id>forgerock</id>
			<name>Forgerock Releases</name>
			<url>http://maven.forgerock.org/repo/releases/</url>
		</repository>
		<repository>
			<id>jfrog-plugin</id>
			<name>JFrog Plugin Releases</name>
			<url>http://repo.jfrog.org/artifactory/plugins-releases/</url>
		</repository>
		<repository>
			<id>servicemix</id>
			<name>ServiceMix Releases</name>
			<url>http://svn.apache.org/repos/asf/servicemix/m2-repo</url>
		</repository>
		<repository>
			<id>codice</id>
			<name>Codice Repository</name>
			<url>https://tools.codice.org/artifacts/content/groups/public/</url>
		</repository>
	</repositories>    
</project>
